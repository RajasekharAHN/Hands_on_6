# -*- coding: utf-8 -*-
"""Hands_0n_6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1scAvCc_Z2h6tf_b_DSk4DY8X4Hezg6DK
"""

import random
import time
import matplotlib.pyplot as plt

def partition_array(arr):
    pivot = arr[len(arr) // 2]
    left_segment = [x for x in arr if x < pivot]
    middle_segment = [x for x in arr if x == pivot]
    right_segment = [x for x in arr if x > pivot]
    return left_segment, middle_segment, right_segment

def perform_quicksort(array):
    if len(array) <= 1:
        return array
    left, middle, right = partition_array(array)
    return perform_quicksort(left) + middle + perform_quicksort(right)

def benchmark_execution(inputs):
    execution_times = []
    for input_data in inputs:
        start_time = time.time()
        perform_quicksort(input_data)
        end_time = time.time()
        execution_times.append(end_time - start_time)
    return execution_times

max_input_size = 200
input_sizes = list(range(1, max_input_size + 1))

best_case_inputs = [list(range(1, size + 1)) for size in input_sizes]
worst_case_inputs = [list(range(size, 0, -1)) for size in input_sizes]
average_case_inputs = [random.sample(range(1, size + 1), size) for size in input_sizes]

plt.plot(input_sizes, benchmark_execution(best_case_inputs), label='Best Case')
plt.plot(input_sizes, benchmark_execution(worst_case_inputs), label='Worst Case')
plt.plot(input_sizes, benchmark_execution(average_case_inputs), label='Average Case')
plt.xlabel('Input Size (n)')
plt.ylabel('Execution Time (s)')
plt.title('Performance Benchmark of Quicksort Algorithm')
plt.legend()
plt.show()

